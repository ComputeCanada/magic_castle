#cloud-config

# mount ephemeral storage in a sub-directory of /mnt instead of
# cloud-init default /mnt
mounts:
 - [ ephemeral0, /mnt/ephemeral0 ]

users:
  - name: tf
    no_create_home: true
    no_user_group: true
    homedir: /tmp
%{ if contains(tags, "puppet") }
    sudo: "ALL = NOPASSWD: /usr/sbin/update_etc_puppetlabs.sh *.zip"
%{ endif ~}
  - name: ${sudoer_username}
    groups: adm, wheel, systemd-journal
    homedir: /${sudoer_username}
    selinux_user: unconfined_u
    sudo: ALL=(ALL) NOPASSWD:ALL
    ssh_authorized_keys:
%{ for key in ssh_authorized_keys ~}
      - ${key}
%{ endfor ~}

runcmd:
  - chmod 755 /etc # avoid issue with Rocky 9.4
  - test ! -d /${sudoer_username} && userdel -f -r ${sudoer_username} && cloud-init clean -r
  - restorecon -R /${sudoer_username}
  - echo -e "Include /etc/ssh/sshd_config.d/50-authenticationmethods.conf" >> /etc/ssh/sshd_config
  - sed -i '/HostKey \/etc\/ssh\/ssh_host_ecdsa_key/ s/^#*/#/' /etc/ssh/sshd_config
  - chmod 644 /etc/ssh/ssh_host_*_key.pub
  - chgrp ssh_keys /etc/ssh/ssh_host_*_key.pub
  - systemctl restart sshd
  # Enable fastest mirror for distribution using dnf package manager
  - dnf config-manager --setopt=fastestmirror=True --save
  # Install package and configure kernel only if building from a "vanilla" linux image
  - |
    if ! test -f /etc/magic-castle-release; then
      # Install required packages in runcmd instead of packages to speedup configuration
      # of the admin user. This reduces the risk of Terraform timing out when trying to
      # upload the terraform_data.yaml
      dnf -y install git pciutils unzip rsync
      dnf -y remove cockpit\* firewalld --exclude=iptables
%{ if ! skip_upgrade ~}
      # Upgrade all packages except Puppet if already installed
      dnf -y upgrade -x puppet*
%{ endif ~}
      # Puppet agent configuration and install
      dnf -y install https://yum.puppet.com/puppet7-release-el-$(grep -oP 'VERSION_ID="\K[^"]' /etc/os-release).noarch.rpm
      dnf -y install puppet-agent-7.32.1
      install -m 700 /dev/null /opt/puppetlabs/bin/postrun
      # kernel configuration
      systemctl disable kdump
      grubby --update-kernel=ALL --args="rd.driver.blacklist=nouveau nouveau.modeset=0"
      grub2-mkconfig -o /boot/grub2/grub.cfg
    fi
%{ if contains(tags, "puppet") }
# Install Java 11 and puppetserver
  - dnf -y install java-11-openjdk-headless puppetserver-7.17.2
# Configure puppetserver to use Java 11
  - sudo sed -i 's;\(JAVA_BIN=\).*;\1"/usr/lib/jvm/jre-11/bin/java";g' /etc/sysconfig/puppetserver
# Configure puppet-agent to start after puppetserver when on puppetserver
  - sed -i 's/^\(After=.*\)$/\1 puppetserver.service/' /usr/lib/systemd/system/puppet.service
  - systemctl daemon-reload
  - systemctl enable puppetserver
# Install gem dependencies
  - "/opt/puppetlabs/puppet/bin/gem install autosign:1.0.1 faraday:2.8.1 faraday-net_http:3.0.2 minitar:0.12.1 puppet_forge:5.0.4 r10k:4.1.0"
  - curl -L -o /opt/puppetlabs/puppet/lib/ruby/vendor_gems/gems/hiera-eyaml-3.4.0/lib/hiera/backend/eyaml/encryptors/pkcs7.rb https://raw.githubusercontent.com/MagicCastle/hiera-eyaml/be1b85f508b3c1a2ce72ac85d093666f2eafb561/lib/hiera/backend/eyaml/encryptors/pkcs7.rb
# Enable autosign with password
  - chgrp puppet /etc/autosign.conf
  - chown puppet:puppet /var/log/autosign.log
  - /opt/puppetlabs/bin/puppet config set autosign /opt/puppetlabs/puppet/bin/autosign-validator --section server
  - /opt/puppetlabs/bin/puppet config set allow_duplicate_certs true --section server
# Generate  bootstrap hieradata asymmetric encryption key
  - mkdir -p /etc/puppetlabs/puppet/eyaml
  - "(cd /etc/puppetlabs/puppet/eyaml; openssl req -x509 -nodes -newkey rsa:2048 -keyout boot_private_key.pkcs7.pem -out boot_public_key.pkcs7.pem -batch)"
  - chown -R root:puppet /etc/puppetlabs/puppet/eyaml
  - chmod 0640 /etc/puppetlabs/puppet/eyaml/boot_private_key.pkcs7.pem
# Setup puppet environment code and modules
  - rm -rf /etc/puppetlabs/code/environments/production
  - git clone ${puppetenv_git} /etc/puppetlabs/code/environments/main
  - ln -s /etc/puppetlabs/code/environments/main /etc/puppetlabs/code/environments/production
  - "(cd /etc/puppetlabs/code/environments/production; git checkout ${puppetenv_rev})"
  - mkdir -p /etc/puppetlabs/data /etc/puppetlabs/facts
  - chgrp -R puppet /etc/puppetlabs/data /etc/puppetlabs/facts
  - ln -sf /etc/puppetlabs/data/{user_data,user_data.yaml,terraform_data.yaml} /etc/puppetlabs/code/environments/production/data/
  - ln -sf /etc/puppetlabs/facts/terraform_facts.yaml /etc/puppetlabs/code/environments/production/site/profile/facts.d
# We use r10k solely to install the modules of the main branch environment.
  - /opt/puppetlabs/puppet/bin/r10k puppetfile install --moduledir=/etc/puppetlabs/code/environments/production/modules --puppetfile=/etc/puppetlabs/code/environments/production/Puppetfile
%{ if puppetfile != "" ~}
  - /opt/puppetlabs/puppet/bin/r10k puppetfile install --moduledir=/etc/puppetlabs/code/modules --puppetfile=/etc/puppetlabs/code/Puppetfile
%{ endif ~}
# Wait for Terraform to scp its YAML data
%{ if ! include_tf_data ~}
  - while [ ! -e "/etc/puppetlabs/data/terraform_data.yaml" ]; do echo "$(date -I'seconds') Waiting for terraform to scp terraform_data.yaml"; sleep 5; done
%{ endif ~}
%{ if node_name != keys(puppetservers)[0] }
  - sed -e '/certificate-authority-service/ s/^/#/' -i /etc/puppetlabs/puppetserver/services.d/ca.cfg
  - sed -e '/certificate-authority-disabled-service/ s/^#//' -i /etc/puppetlabs/puppetserver/services.d/ca.cfg
%{ endif }
  - chgrp puppet /etc/puppetlabs/puppet/csr_attributes.yaml
%{ endif }
# Setup puppet servers
%{ for host, ip in puppetservers ~}
  - echo "${ip} ${host}" >> /etc/hosts
%{ endfor ~}
%{ if length(puppetservers) > 0 ~}
  - /opt/puppetlabs/bin/puppet config set server ${keys(puppetservers)[0]}
%{ endif ~}
  - /opt/puppetlabs/bin/puppet config set certname ${node_name}
  - /opt/puppetlabs/bin/puppet config set waitforcert 15s
  - /opt/puppetlabs/bin/puppet config set report false
  - /opt/puppetlabs/bin/puppet config set postrun_command /opt/puppetlabs/bin/postrun
  - systemctl enable puppet
# Remove all ifcfg configuration files that have no corresponding network interface in ip link show.
  - for i in /etc/sysconfig/network-scripts/ifcfg-*; do if ! ip link show | grep -q "$${i##*-}:"; then rm -f $i; fi; done
%{ if cloud_provider == "gcp" }
# Google Cloud user-data fact generates a warning because its size is greater than what is allowed (<4096 bytes).
# We have no use for it, so we remove startup-script, user-data and user-data-encoding when running in GCE.
  - sed -i "/gce_data\['instance'\] = instance_data/i \ \ \ \ \ \ \ \ \ \ instance_data['attributes'].delete('startup-script')" /opt/puppetlabs/puppet/lib/ruby/vendor_ruby/facter/resolvers/gce.rb
  - sed -i "/gce_data\['instance'\] = instance_data/i \ \ \ \ \ \ \ \ \ \ instance_data['attributes'].delete('user-data')" /opt/puppetlabs/puppet/lib/ruby/vendor_ruby/facter/resolvers/gce.rb
  - sed -i "/gce_data\['instance'\] = instance_data/i \ \ \ \ \ \ \ \ \ \ instance_data['attributes'].delete('user-data-encoding')" /opt/puppetlabs/puppet/lib/ruby/vendor_ruby/facter/resolvers/gce.rb
%{ endif }
%{ if contains(tags, "puppet") }
# Bootstrap services that are essential to the puppet repo
  - (cd /etc/puppetlabs/code/environments/production; test -e bootstrap.sh && ./bootstrap.sh)
%{ endif }
  # If the current image has already been configured with Magic Castle Puppet environment,
  # we can start puppet and skip reboot, reducing the delay for bringing the node up.
  - test -f /etc/magic-castle-release && systemctl start puppet || true

write_files:
  - content: restrict%{ if contains(tags, "puppet") },pty%{ else }%{ for host, ip in puppetservers },permitopen="${ip}:22"%{ endfor },port-forwarding,command="/sbin/nologin"%{ endif } ${tf_ssh_public_key}
    path: /etc/ssh/authorized_keys.tf
    permissions: "0644"
  - content: |
      Match User tf
        AuthorizedKeysFile /etc/ssh/authorized_keys.%u
        AuthenticationMethods publickey
    path: /etc/ssh/sshd_config.d/50-authenticationmethods.conf
    permissions: "0600"
  - content: |
      facts : {
        blocklist : [
          "EC2",
          %{ if cloud_provider != "gcp" } "GCE", %{ endif }
        ],
      }
    path: /etc/puppetlabs/facter/facter.conf
    permissions: "0644"
  - content: |
      ---
      prefix : "${node_prefix}"
      cloud:
        provider: "${cloud_provider}"
        region: "${cloud_region}"
    path: /etc/puppetlabs/facter/facts.d/prefix.yaml
    permissions: "0644"
%{ if contains(tags, "puppet") ~}
  - content: |
      #!/bin/bash
      ZIP_FILE=$${1}
      ZIP_DIR=$${ZIP_FILE%.zip}

      # unzip is not necessarily installed when connecting, but python is.
      /usr/libexec/platform-python -c "import zipfile; zipfile.ZipFile('$${ZIP_FILE}').extractall()"

      chmod g-w,o-rwx $(find $${ZIP_DIR}/ -type f ! -path $${ZIP_DIR}/code/*)
      chown -R root:52 $${ZIP_DIR}
      mkdir -p -m 755 /etc/puppetlabs/
      rsync -avh --no-t --exclude 'data' $${ZIP_DIR}/ /etc/puppetlabs/
      rsync -avh --no-t --del $${ZIP_DIR}/data/ /etc/puppetlabs/data/
      rm -rf $${ZIP_DIR}/

      if [ -f /opt/puppetlabs/puppet/bin/r10k ] && [ /etc/puppetlabs/code/Puppetfile -nt /etc/puppetlabs/code/modules ]; then
          /opt/puppetlabs/puppet/bin/r10k puppetfile install --moduledir=/etc/puppetlabs/code/modules --puppetfile=/etc/puppetlabs/code/Puppetfile
          touch /etc/puppetlabs/code/modules
      fi

      if [ -f /usr/local/bin/consul ] && [ -f /usr/bin/jq ]; then
          /usr/local/bin/consul event -token=$(jq -r .acl.tokens.agent /etc/consul/config.json) -name=puppet $(date +%s)
      fi
    permissions: 0755
    path: /usr/sbin/update_etc_puppetlabs.sh
  - content: |
      ---
      general:
        loglevel: warn
        logfile: "/var/log/autosign.log"
        validation_order:
          - password_list
      password_list:
        password: "${puppetserver_password}"
    path: /etc/autosign.conf
    permissions: "0640"
  - path: /var/log/autosign.log
    permissions: "0640"
%{ if include_tf_data ~}
  - path: /etc/puppetlabs/data/terraform_data.yaml
    content: |
      ${indent(6, terraform_data)}
    permissions: "0640"
  - path: /etc/puppetlabs/facts/terraform_facts.yaml
    content: |
      ${indent(6, terraform_facts)}
    permissions: "0640"
%{ endif ~}
%{ if puppetfile != "" ~}
  - path: /etc/puppetlabs/code/Puppetfile
    content: |
      ${indent(6, puppetfile)}
    permissions: "0644"
%{ endif ~}
%{ endif ~}
  - content: |
      ---
      custom_attributes:
        1.2.840.113549.1.9.7: "${puppetserver_password}"
    path: /etc/puppetlabs/puppet/csr_attributes.yaml
    permissions: "0640"
    owner: root:root

ssh_keys:
%{ for key, values in hostkeys ~}
  ${key}_public: |
    ${indent(4, values["public"])}
  ${key}_private: |
    ${indent(4, values["private"])}
%{ endfor ~}

disable_ec2_metadata: false
timezone: "UTC"
fqdn: "${node_name}.int.${domain_name}"
manage_etc_hosts: false
output: { all: "| tee -a /var/log/cloud-init-output.log" }
power_state:
  delay: now
  mode: reboot
  condition: test ! -f /etc/magic-castle-release

# Configure owner of /var/log/cloud-init.log
syslog_fix_perms: root:systemd-journal
