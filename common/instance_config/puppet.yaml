#cloud-config
users:
  - name: ${sudoer_username}
    groups: adm, wheel, systemd-journal
    homedir: /${sudoer_username}
    selinux_user: unconfined_u
    sudo: ALL=(ALL) NOPASSWD:ALL
    ssh_authorized_keys:
%{ for key in ssh_authorized_keys ~}
      - ${key}
%{ endfor ~}

runcmd:
  # Verify ${sudoer_username} was created with the right homedir. If it wasn't
  # the user with the corresponding username is entirely removed, cloud-init is
  # cleaned and the system is rebooted. This happens when configuring from images
  # that were customized.
  - test ! -d /${sudoer_username} && userdel -f -r ${sudoer_username} && cloud-init clean -r
  - restorecon -R /${sudoer_username}
  - sed -i '/HostKey \/etc\/ssh\/ssh_host_ecdsa_key/ s/^#*/#/' /etc/ssh/sshd_config
  - chmod 644 /etc/ssh/ssh_host_*_key.pub
  - chgrp ssh_keys /etc/ssh/ssh_host_*_key.pub
  - systemctl restart sshd
  # Enable fastest mirror for distribution using dnf package manager
  - test -f /etc/dnf/dnf.conf && (grep -qxF "fastestmirror=True" /etc/dnf/dnf.conf || echo "fastestmirror=True" >> /etc/dnf/dnf.conf)
  # Install package and configure kernel only if building from a "vanilla" linux image
  - |
    if ! test -f /etc/magic-castle-release; then
      # Install required packages in runcmd instead of packages to speedup configuration
      # of the admin user. This reduces the risk of Terraform timing out when trying to
      # upload the terraform_data.yaml
      yum -y install git pciutils unzip iptables-services
      yum remove -y firewalld --exclude=iptables
      # Upgrade all packages except Puppet if already installed
      yum -y upgrade -x puppet*
      # Puppet agent configuration and install
      yum -y install https://yum.puppet.com/puppet7-release-el-$(grep -oP 'VERSION_ID="\K[^"]' /etc/os-release).noarch.rpm
      yum -y install puppet-agent-7.24.0
      install -m 700 /dev/null /opt/puppetlabs/bin/postrun
      # kernel configuration
      systemctl disable kdump
      sed -i 's/crashkernel=auto/crashkernel=no/' /etc/default/grub
      sed -i 's/GRUB_CMDLINE_LINUX="[^"]*/& nouveau.modeset=0 rd.driver.blacklist=nouveau/' /etc/default/grub
      grub2-mkconfig -o /boot/grub2/grub.cfg
    fi
%{ if contains(tags, "puppet") }
  # Install Java 11
  - yum -y install java-11-openjdk-headless
  - yum -y install puppetserver-7.11.0
  - mkdir /var/autosign
  - chown puppet:puppet /var/autosign
  - chmod 750 /var/autosign
  - touch /var/log/autosign.log
  - chown puppet:puppet /var/log/autosign.log
  - /opt/puppetlabs/puppet/bin/gem install autosign
  - /opt/puppetlabs/bin/puppet config set autosign /opt/puppetlabs/puppet/bin/autosign-validator --section master
  - /opt/puppetlabs/bin/puppet config set allow_duplicate_certs true --section master
  - chown puppet:puppet /etc/autosign.conf
  - sed -i 's/^\(After=.*\)$/\1 puppetserver.service/' /usr/lib/systemd/system/puppet.service
  - systemctl daemon-reload
  - systemctl enable puppetserver
# Configure puppetserver to use Java 11
  - sudo sed -i 's;\(JAVA_BIN=\).*;\1"/usr/lib/jvm/jre-11/bin/java";g' /etc/sysconfig/puppetserver
# Generate hieradata asymmetric encryption key
  - /opt/puppetlabs/puppet/bin/gem install hiera-eyaml
  - mkdir -p /etc/puppetlabs/puppet/eyaml
  - /opt/puppetlabs/puppet/bin/eyaml createkeys --pkcs7-private-key=/etc/puppetlabs/puppet/eyaml/private_key.pkcs7.pem --pkcs7-public-key=/etc/puppetlabs/puppet/eyaml/public_key.pkcs7.pem
  - /opt/puppetlabs/puppet/bin/eyaml createkeys --pkcs7-private-key=/etc/puppetlabs/puppet/eyaml/boot_private_key.pkcs7.pem --pkcs7-public-key=/etc/puppetlabs/puppet/eyaml/boot_public_key.pkcs7.pem
  - chown -R puppet:puppet /etc/puppetlabs/puppet/eyaml
  - chmod 0400 /etc/puppetlabs/puppet/eyaml/private_key.pkcs7.pem
  - chmod 0400 /etc/puppetlabs/puppet/eyaml/boot_private_key.pkcs7.pem
# Setup puppet environment code and modules
  - rm -rf /etc/puppetlabs/code/environments/production
  - git clone ${puppetenv_git} /etc/puppetlabs/code/environments/production
  - "(cd /etc/puppetlabs/code/environments/production; git checkout ${puppetenv_rev})"
  - mkdir -p /etc/puppetlabs/data
  - mkdir -p /etc/puppetlabs/facts
  - chgrp -R puppet /etc/puppetlabs/data
  - chgrp -R puppet /etc/puppetlabs/facts
  - ln -sf /etc/puppetlabs/data/terraform_data.yaml /etc/puppetlabs/code/environments/production/data/
  - ln -sf /etc/puppetlabs/data/user_data.yaml /etc/puppetlabs/code/environments/production/data/
  - ln -sf /etc/puppetlabs/facts/terraform_facts.yaml /etc/puppetlabs/code/environments/production/site/profile/facts.d
  - /opt/puppetlabs/puppet/bin/gem install librarian-puppet
  - "(cd /etc/puppetlabs/code/environments/production/ && HOME=/root PATH=$PATH:/opt/puppetlabs/puppet/bin /opt/puppetlabs/puppet/bin/librarian-puppet install)"
# Bootstrap services that are essential to the puppet repo
  - (cd /etc/puppetlabs/code/environments/production; test -e bootstrap.sh && ./bootstrap.sh)
%{ endif }
  - /opt/puppetlabs/bin/puppet config set certname ${node_name}
  - /opt/puppetlabs/bin/puppet config set waitforcert 15s
  - /opt/puppetlabs/bin/puppet config set report false
  - /opt/puppetlabs/bin/puppet config set postrun_command /opt/puppetlabs/bin/postrun
  - systemctl enable puppet
# Remove all ifcfg configuration files that have no corresponding network interface in ip link show.
  - for i in /etc/sysconfig/network-scripts/ifcfg-*; do if ! ip link show | grep -q "$${i##*-}:"; then rm -f $i; fi; done
# AWS EFA driver installation
%{ if contains(tags, "efa") }
  - curl -O https://efa-installer.amazonaws.com/aws-efa-installer-latest.tar.gz
  - "(tar xf aws-efa-installer-latest.tar.gz && cd aws-efa-installer && ./efa_installer.sh --yes --minimal)"
  - rm -fr aws-efa-installer aws-efa-installer-latest.tar.gz
%{ endif }
  # If the current image has already been configured with Magic Castle Puppet environment,
  # we can start puppet and skip reboot, reducing the delay for bringing the node up.
  - test -f /etc/magic-castle-release && systemctl start puppet

write_files:
  - content: |
%{ if contains(tags, "puppet") }
      127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 puppet
%{ else }
      127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
%{ for ip in puppetserver_ip ~}
      ${ip} puppet
%{ endfor ~}
%{ endif }
    path: /etc/hosts
    permissions: "0644"
  - content: |
      facts : {
        blocklist : [ "EC2", "GCE" ],
      }
    path: /etc/puppetlabs/facter/facter.conf
    permissions: "0644"
%{ if contains(tags, "puppet") }
  - content: |
      ---
      general:
        loglevel: warn
        logfile: "/var/log/autosign.log"
      jwt_token:
        secret: "${puppetserver_password}"
        validity: '7200'
        journalfile: "/root/var/autosign/autosign.journal"
      password_list:
        password: "${puppetserver_password}"
    path: /etc/autosign.conf
    permissions: "0640"
%{ endif }
%{ if ! contains(tags, "puppet") }
  - content: |
      ---
      custom_attributes:
        1.2.840.113549.1.9.7: "${puppetserver_password}"
    path: /etc/puppetlabs/puppet/csr_attributes.yaml
    permissions: "0640"
%{ endif }

ssh_keys:
%{ for key, values in hostkeys ~}
  ${key}_public: |
    ${indent(4, values["public"])}
  ${key}_private: |
    ${indent(4, values["private"])}
%{ endfor ~}

disable_ec2_metadata: false
timezone: "UTC"
fqdn: "${node_name}"
output: { all: "| tee -a /var/log/cloud-init-output.log" }
power_state:
  delay: now
  mode: reboot
  condition: test ! -f /etc/magic-castle-release
